import uuid
import json
from urllib.parse import unquote_plus
import boto3
from PIL import Image
from botocore.exceptions import NoCredentialsError
from botocore.exceptions import ClientError
import io
import os

# GET
# Get the bucket names from environment variables

bucket_name = boto3.client("s3 bucket name")
s3_client = boto3.client("s3")
eventbridge_client = boto3.client("events")
EVENT_BUS_NAME = "image-processing-bus"

def put_s3_image(bucket_name, key, image):
    # Code to put the resized image back to S3
    s3_client.upload_file(image, bucket_name, f"thumbnails/{key}")  
  
            
def calculate_resized_height(original_width, original_height, new_width):
    # Code to calculate the image hight after resizing to a new width (thumbnail)
    return int(original_height * (new_width / original_width))

def resize_image(image_path, resized_path):
    with Image.open(image_path) as image:
        width, height = image.size
        if width > 200:
            new_height = int(height * (200 / width))
            image = image.resize((200, new_height))
            image.save(resized_path)
        else:
            image.save(resized_path)

def lambda_handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name']
        key = unquote_plus(record['s3']['object']['key'])
        tmpkey = key.replace('/', '')
        download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)
        upload_path = '/tmp/resized-{}'.format(tmpkey)

        s3_client.download_file(bucket, key, download_path)
        resize_image(download_path, upload_path)
        
        try:
            s3_client.upload_file(upload_path, bucket, 'processed/{}'.format(key))
            eventbridge_client.put_events(
                Entries=[
                    {
                        'Source': 'custom.myApp',
                        'DetailType': 'ImageProcessing',
                        'Detail': '{"status": "SUCCEEDED"}',
                        'EventBusName': 'image-processing-bus'
                    }
                ]
            )
        except Exception as e:
            eventbridge_client.put_events(
                Entries=[
                    {
                        'Source': 'custom.myApp',
                        'DetailType': 'ImageProcessing',
                        'Detail': '{"status": "FAILED"}',
                        'EventBusName': 'image-processing-bus'
                    }
                ]
            )   
        
#  Code to upload the resized image to S3
def create_thumbnail(event, context):
    for record in event["Records"]:
        try:
            bucket_name = record["s3"]["bucket"]["name"]
            original_s3_path = unquote_plus(record["s3"]["object"]["key"])
            filename = original_s3_path.split("/")[-1]
            print(f"The image name is s3://{bucket_name}/uploads/{filename}")
            print(f"The processed image name is s3://{bucket_name}/processed/{filename}")
            local_download_path = f"/tmp/{uuid.uuid4()}{filename}"
            print(f"The local image name is {local_download_path}")
            local_upload_path = f"/tmp/resized-{filename}"
            print(f"The local processed image name is {local_upload_path}")
            s3_client.download_file(
            bucket_name, f"uploads/{filename}", local_download_path
            )
            resize_image(local_download_path, local_upload_path, 200)
            s3_client.upload_file(
                local_upload_path, bucket_name, f"processed/{filename}"
            )
            print("SUCCEEDED")
        except Exception as ex:
            print("FAILED")
            print("Error processing image: ", ex)
            raise
 
      
def notify_resize_success_function(event, context):
    # Success notification code here
    detail = json.loads(event['detail'])
    url = detail['url']
    # Here you can add code to handle the success event, such as sending a notification
    print(f"Image processing succeeded. Resized image URL: {url}")

def notify_resize_fail_function(event, context):
    # Failure notification code here
    detail = json.loads(event['detail'])
    error = detail['error']
    # Here you can add code to handle the failure event, such as sending an alert
    print(f"Image processing failed. Error: {error}")

   
def get_s3_image(bucket, key):
    # Get the image from S3
    try:
        original_s3_path = unquote_plus(event["detail"]["s3"]["object"]["key"])
        print(f"The image name is s3://{bucket_name}/{original_s3_path}")
        tmpkey = original_s3_path.replace("/", "")
        local_download_path = "/tmp/{}{}".format(uuid.uuid4(), tmpkey)
        s3_client.download_file(bucket_name, original_s3_path, local_download_path)
    except botocore.exceptions.ClientError as inner_e:
        if inner_e.response["Error"]["Code"] == "404":
            print("The object does not exist.")
        else:
            raise
        

    s3_client.upload_file(
        local_upload_path, bucket_name, f"thumbnails/{filename}"
    )
    print("SUCCEEDED")

    # Put a success event to EventBridge
    eventbridge_client.put_events(
        Entries=[
            {
                'Source': 'custom.myApp',
                'DetailType': 'ImageProcessing',
                'Detail': json.dumps({
                    'status': 'SUCCEEDED',
                    'url': f"s3://{bucket_name}/thumbnails/{filename}"
                }),
                'EventBusName': 'image-processing-bus'
            }
        ]
    )

    except Exception as ex:
    print("FAILED")
    print("Error processing image: ", ex)

# Put a failure event to EventBridge
eventbridge_client.put_events(
    Entries=[
        {
            'Source': 'custom.myApp',
            'DetailType': 'ImageProcessing',
            'Detail': json.dumps({
                'status': 'FAILED',
                'error': str(ex)  # Add any additional information you want here

            }),
            'EventBusName': 'image-processing-bus'
        }
    ]
)
raise

